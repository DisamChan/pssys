<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" 
    xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/data/repository 
        http://www.springframework.org/schema/data/repository/spring-repository-1.8.xsd
		"
		 
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true"  location="classpath:pssys.properties" />
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 
    <util:properties id="APP_PROP" location="classpath:jeesite.properties" local-override="true"/>-->
    
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="true"/>
	<context:annotation-config />
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。-->
	 <!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.pssys">  
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 配置 JSR303 Bean Validator 定义 
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />-->

	<!-- 缓存配置 
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>-->
	
	<!-- 数据源配置, 使用 BoneCP 数据库连接池
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> -->
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass 
	    <property name="driverClassName" value="${jdbc.driver}" />-->
		<!-- 基本属性 url、user、password 
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />-->
		<!-- 配置初始化大小、最小、最大 
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />-->
		<!-- 配置获取连接等待超时的时间 
		<property name="maxWait" value="60000" />-->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
		<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		 -->
		
		<!-- 配置监控统计拦截的filters
	    <property name="filters" value="stat" /> 
	</bean> -->
	
	<!-- 使用c3p0 做连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${datasource.connection.driver_class}" />
        <property name="jdbcUrl" value="${datasource.connection.url}" />
        <property name="user" value="${datasource.connection.username}" />
        <property name="password" value="${datasource.connection.password}" />
        <property name="minPoolSize" value="${datasource.connection.minPoolSize}" />
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${datasource.connection.maxPoolSize}" />
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${datasource.connection.maxIdleTime}" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${datasource.connection.acquireIncrement}" />
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
        <property name="maxStatements" value="${datasource.connection.maxStatements}" />
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
        <property name="maxStatementsPerConnection"
            value="${datasource.connection.maxStatementsPerConnection}" />
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${datasource.connection.initialPoolSize}" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod"
            value="${datasource.connection.idleConnectionTestPeriod}" />
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts"
            value="${datasource.connection.acquireRetryAttempts}" />
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
        <property name="breakAfterAcquireFailure"
            value="${datasource.connection.breakAfterAcquireFailure}" />
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
            等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout"
            value="${datasource.connection.testConnectionOnCheckout}" />
        <property name="checkoutTimeout" value="${datasource.connection.checkoutTimeout}" />
        <property name="testConnectionOnCheckin"
            value="${datasource.connection.testConnectionOnCheckin}" />
        <property name="acquireRetryDelay" value="${datasource.connection.acquireRetryDelay}" />
    </bean>
    
    <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 实体的包路径 -->
        <property name="packagesToScan" value="com.pssys.entity"></property>
        <property name="jpaVendorAdapter"  ref="hibernateJpaVendorAdapter"></property>
        <property name="jpaPropertyMap">
            <map>
                <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
                <entry key="hibernate.archive.autodetection" value="class"/>
                <!-- 不检查@NamedQuery -->
                <entry key="hibernate.query.startup_check" value="false"/>

                <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}"/>
                <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}"/>
                <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}"/>
                <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}"/>
            </map>
        </property>
    </bean>

<!-- hibernate与jpa的适配器 -->
<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
 <property name="showSql" value="true"></property>
 <property name="generateDdl" value="true"></property>
 </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryBean"></property>
    </bean>
        
    <!-- 定义事务 也有两种方式，一种是默认的spring Datasource另一种是交给springData jpa -->
    <!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean> -->
    
   <!--
        spring data jpa repository
        base-package:扫描的包
        repository-impl-postfix:仓库自定义实现类型的后缀  自动扫描并添加到接口的实现
        factory-class 仓库接口的实现工厂
    -->
     <!-- 
    创建查询的顺序
        Spring Data JPA 在为接口创建代理对象时，如果发现同时存在多种上述情况可用，它该优先采用哪种策略呢？
        <jpa:repositories> 提供了 query-lookup-strategy 属性，用以指定查找的顺序。它有如下三个取值：
        1：create-if-not-found：如果方法通过@Query指定了查询语句，则使用该语句实现查询；如果没有，则查找是否定义了符合条件的命名查询，如果找到，则使用该命名查询；如果两者都没有找到，则通过解析方法名字来创建查询。这是 query-lookup-strategy 属性的默认值
        2：create：通过解析方法名字来创建查询。即使有符合的命名查询，或者方法通过 @Query指定的查询语句，都将会被忽略
        3：use-declared-query：如果方法通过@Query指定了查询语句，则使用该语句实现查询；如果没有，则查找是否定义了符合条件的命名查询，如果找到，则使用该命名查询；如果两者都没有找到，则抛出异常
     -->
        <!--base-package  jpa实现的包路径 -->
    <jpa:repositories 
    base-package="com.pssys.dao" 
    entity-manager-factory-ref="entityManagerFactoryBean"
    transaction-manager-ref="transactionManager"
    repository-impl-postfix="*Impl"
    query-lookup-strategy="create-if-not-found"
    factory-class="com.pssys.common.persistence.support.BaseDaoSupportFactoryBean"
    >
    </jpa:repositories>
</beans>